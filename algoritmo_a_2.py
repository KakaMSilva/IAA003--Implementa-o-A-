# -*- coding: utf-8 -*-
"""Algoritmo A* 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QV9mixAHwYRQqGsBe7J8qYA-biODzFHq
"""

dists = {
    'Bucharest': [('Urzineci',85), ('Giurgiu',90), ('Pitesti',101), ('Fagaras',211)],
    'Giurgiu': [('Bucharest',90)],
    'Urzineci': [('Bucharest',85), ('Hirsova',98), ('Vaslui',142)],
    'Hirsova': [('Urzineci',98), ('Eforie',86)],
    'Eforie': [ ('Hirsova',86)],
    'Vaslui': [('Urzineci',142), ('Iasi',92)],
    'Iasi': [('Vaslui', 92), ('Neamt',87)],
    'Neamt': [('Iasi', 87)],
    'Fagaras': [('Bucharest',211), ('Sibiu',99)],
    'Pitesti': [('Bucharest',101), ('Rimnicu Vilcea',97), ('Craiova',138)],
    'Craiova':[('Pitesti',138), ('Rimnicu Vilcea',146), ('Dobreta',120)],
    'Rimnicu Vilcea':[('Craiova',146), ('Pitesti',97), ('Sibiu',80)],
    'Sibiu':[('Rimnicu Vilcea',80), ('Fagaras',99), ('Oradea',151), ('Arad',140)],
    'Oradea':[('Sibiu',151), ('Zerind',71)],
    'Zerind':[('Oradea',71), ('Arad',75)],
    'Arad':[('Zerind',75), ('Timisoara',118), ('Sibiu',140)],
    'Timisoara':[('Arad',118), ('Lugoj',111)],
    'Lugoj':[('Timisoara',111), ('Mehadia',70)],
    'Mehadia':[('Lugoj',70), ('Dobreta',75)],
    'Dobreta':[('Mehadia',75), ('Craiova',120)],
}


        
straight_line_dists_from_bucharest = {
    'Arad': 366,
    'Bucharest':0,
    'Craiova':160,
    'Dobreta':242,
    'Eforie':161,
    'Fagaras':176,
    'Giurgiu':77,
    'Hirsova':151,
    'Iasi':226,
    'Lugoj':244,
    'Mehadia':241,
    'Neamt':234,
    'Oradea':380,
    'Pitesti':100,
    'Rimnicu Vilcea':193,
    'Sibiu':253,
    'Timisoara':329,
    'Urzineci':80,
    'Vaslui':199,
    'Zerind':374
}

import math

def f_score(node):
    return node['custo'] + node['heuristica']
    
def a_star(start, goal='Bucharest'):
    inicio_node = {'nome': start, 'custo': 0, 'heuristica': straight_line_dists_from_bucharest[start], 'pai': None}
    abrir_lista = [inicio_node]
    fechar_lista = []
    while abrir_lista:
        atual = min(abrir_lista, key=lambda node: f_score(node))
        abrir_lista.remove(atual)
        if atual['nome'] == goal:
            caminho = []
            while atual:
                caminho.append(atual['nome'])
                atual = atual['pai']
            return list(reversed(caminho))
        fechar_lista.append(atual)
        for vizinho_nome, vizinho_custo in dists[atual['nome']]:   
            vizinho = {'nome': vizinho_nome, 'custo': atual['custo'] + vizinho_custo, 'heuristica': straight_line_dists_from_bucharest[vizinho_nome], 'pai': atual}           
            if vizinho in fechar_lista:
                continue            
            if vizinho not in abrir_lista:
                abrir_lista.append(vizinho)
            else:                
                index = abrir_lista.index(vizinho)
                if vizinho['custo'] < abrir_lista[index]['custo']:
                    abrir_lista[index] = vizinho
    return "Caminho não encontrado"

print('Inicio:', end=' ')
  start = input().strip()
  if start not in dists:
      print('Cidade não existe.')
  else:
        print('\nCaminho ate o objetivo:')
        print(a_star(start))